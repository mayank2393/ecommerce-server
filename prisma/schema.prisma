// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  email String @unique 
  role Roles @default(customer)
  cart Cart[]
  orders Order[]
  wishlist Wishlist?
  items_created Product[]
  additional_details Profile?
  reviews Review[]
  accessToken String?
  refreshToken String?
  createdAt DateTime @default(now())
}

model Profile{
  user_id String @id
  firstName String
  lastName String
  profile_picture String?
  house_address String
  pincode String
  city String
  state String
  country String
  phone_number String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model Product {
  id String @id @default(cuid())
  product_name String
  product_description String
  brand_name String
  price Float
  category_id String
  product_image String
  seller_id String
  reviews Review[]
  orders OrderProduct[]
  carts CartProduct[] 
  WishlistProducts Wishlist[] @relation("WishlistProducts")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  
  seller User @relation(fields: [seller_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])
}

model Category {
  id String @id @default(cuid())
  category_name String
  products Product[]
}

model Cart{
  cart_id String @id @default(cuid())
  user_id String
  products CartProduct[]
  total_items Int
  total_amount Float

  user User @relation(fields: [user_id], references: [id])
}

model CartProduct {
  id String @id @default(cuid())
  cart Cart @relation(fields: [cart_id], references: [cart_id])
  cart_id String
  product Product @relation(fields: [product_id], references: [id])
  product_id String
}

model Wishlist{
  wishlist_id String @id @default(cuid())
  user_id String @unique
  products Product[] @relation("WishlistProducts")

  user User @relation(fields: [user_id], references: [id])
}

model Order{
  id String @id @default(cuid())
  isDelivered Boolean @default(false)
  products OrderProduct[]
  amount Float
  user_id String
  invoice Invoice?

  user User @relation(fields: [user_id],references: [id])
}

model OrderProduct {
  id String @id @default(cuid())
  order Order @relation(fields: [order_id], references: [id])
  order_id String
  product Product @relation(fields: [product_id], references: [id])
  product_id String
  quantity Int
  amount Float
}

model Invoice{
  id String @id @default(cuid())
  order_id String @unique
  amount Float
  issuedAt DateTime @default(now())

  order Order @relation(fields: [order_id], references: [id])
}

model Review{
  id String @id @default(cuid())
  product_id String
  user_id String
  rating Int
  comments String
  createdAt DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

enum Roles {
  customer
  admin 
  seller
}